buildscript {
  repositories {
    mavenLocal()
    // https://maven.aliyun.com/mvn/view
    maven { url 'https://maven.aliyun.com/repository/public' }
    jcenter()
    mavenCentral()
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

import java.nio.file.Files
import java.nio.file.Paths;

plugins {
  id 'java'
  id 'application'
  id 'idea'
  id 'checkstyle'
  id 'com.github.sherter.google-java-format' version '0.8'
  id 'org.springframework.boot' version '2.1.4.RELEASE'
  id "io.freefair.lombok" version "3.5.2"
  id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

allprojects {
  repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    jcenter()
    mavenCentral()
    maven { url 'http://repo.spring.io/release' }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://repo.spring.io/snapshot' }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'application'
  apply plugin: 'idea'
  apply plugin: 'io.freefair.lombok'

  dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web:2.1.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker:2.1.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-devtools:2.1.4.RELEASE'
    implementation 'org.springframework.data:spring-data-commons:2.1.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.1.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-logging:2.1.4.RELEASE'

    // database
    implementation 'com.baomidou:mybatis-plus-boot-starter:3.5.3.2'
    implementation 'mysql:mysql-connector-java:8.0.16'

    // utils
    implementation 'org.projectlombok:lombok:1.18.8'
    implementation 'io.swagger:swagger-models:1.6.1'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.0'
    implementation 'cn.hutool:hutool-core:4.5.10'
    implementation 'cn.hutool:hutool-json:4.5.10'
    implementation 'cn.hutool:hutool-http:4.5.10'
  }

  /**
   * Watch java files' changes, and recompile
   *
   * ```
   * ./gradlew pro-*:watchJava -t
   * ./gradlew pro-*:watchJava --continuous
   * ```
   */
  // noinspection GroovyAssignabilityCheck
  task watchJava(type: GradleBuild) {
    description "Watch java files' changes, and recompile."
    inputs.files 'src/main/java'
    tasks = ['compileJava']
  }
}

def mpMapperPath = 'pro-mp/src/main/java/dr/sbs/mp/mapper/'
def mpEntityPath = 'pro-mp/src/main/java/dr/sbs/mp/entity/'
def mpServicePath = 'pro-mp/src/main/java/dr/sbs/mp/service/'
def mp2MapperPath = 'pro-dds-mp2/src/main/java/dr/sbs/mp2/mapper/'
def mp2EntityPath = 'pro-dds-mp2/src/main/java/dr/sbs/mp2/entity/'
def mp2ServicePath = 'pro-dds-mp2/src/main/java/dr/sbs/mp2/service/'
def mp3MapperPath = 'pro-dds-mp3/src/main/java/dr/sbs/mp3/mapper/'
def mp3EntityPath = 'pro-dds-mp3/src/main/java/dr/sbs/mp3/entity/'
def mp3ServicePath = 'pro-dds-mp3/src/main/java/dr/sbs/mp3/service/'

googleJavaFormat {
  toolVersion = "1.7"
  exclude mpMapperPath
  exclude mpEntityPath
  exclude mpServicePath
  exclude mp2MapperPath
  exclude mp2EntityPath
  exclude mp2ServicePath
  exclude mp3MapperPath
  exclude mp3EntityPath
  exclude mp3ServicePath
}

checkstyle {
  toolVersion '8.21'
}

/**
 * checkstyle all java files
 *
 * @note - Task[Checkstyle] depends on Plugin[checkstyle]
 *       - Checkstyle does not have functionality of auto-fixing
 */
// noinspection GroovyAssignabilityCheck
task checkJava(type: Checkstyle) {
  configFile = file('config/checkstyle/checkstyle.xml')
  classpath = files()
  source './'
  exclude mpMapperPath
  exclude mpEntityPath
  exclude mpServicePath
  exclude mp2MapperPath
  exclude mp2EntityPath
  exclude mp2ServicePath
  exclude mp3MapperPath
  exclude mp3EntityPath
  exclude mp3ServicePath

  if (System.properties.checkJavaInclude != null) {
    def s = ((String)System.properties.checkJavaInclude).split(',')
    def i = Arrays.asList(s)
    include i
  }
}

try {
  // Copy git pre-commit hook
  if (Files.exists(Paths.get('.git')) && !Files.exists(Paths.get('.git/hooks/pre-commit'))) {
    Files.copy(Paths.get('config/hooks/pre-commit-stub'), Paths.get('.git/hooks/pre-commit'));
  }
}
catch (e) {}
